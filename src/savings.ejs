<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Savings | Expenses Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        green: {
                            100: '#d1fae5',
                            200: '#a7f3d0',
                            700: '#047857',
                            800: '#065f46',
                        }
                    }
                }
            }
        }
    </script>
    <style>
        .category-tag {
            display: inline-flex;
            align-items: center;
            background-color: #d1fae5;
            color: #047857;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.875rem;
            margin: 0.25rem;
        }

        .category-tag button {
            margin-left: 0.5rem;
            color: #ef4444;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 0.875rem;
        }

        @media (max-width: 768px) {
            .table-header {
                display: none;
            }

            .savings-item {
                display: flex;
                flex-direction: column;
                padding: 1rem;
                border-bottom: 1px solid #e5e7eb;
            }
        }
    </style>
</head>

<body class="bg-gray-50">
    <!-- Navigation Bar at the very top -->
    <nav class="w-full bg-white shadow mb-8">
        <div class="container mx-auto px-4 py-4 flex justify-between items-center">
            <div class="text-xl font-bold text-gray-700">Expenses Tracker</div>
            <ul class="flex space-x-6">
                <li><a href="/" class="text-gray-600 hover:text-blue-600">Home</a></li>
                <li><a href="/logout" class="text-gray-600 hover:text-blue-600">Logout</a></li>
            </ul>
        </div>
    </nav>

    <div class="container mx-auto px-4 mb-8">
        <div class="flex flex-col md:flex-row gap-6">
            <!-- Left Column - Form and Summary -->
            <div class="w-full md:w-1/3">
                <!-- Add Savings Form -->
                <div class="bg-white p-6 rounded-lg shadow mb-6">
                    <h2 class="text-xl font-semibold text-gray-700 mb-4">Add New Savings</h2>
                    <form id="savingsForm">
                        <div class="mb-4">
                            <label class="block text-gray-700 text-sm font-bold mb-2" for="date">
                                Date
                            </label>
                            <input type="date" id="date" required
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                        </div>

                        <div class="mb-4">
                            <label class="block text-gray-700 text-sm font-bold mb-2" for="category">
                                Category
                            </label>
                            <div class="flex gap-2">
                                <select id="category"
                                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                                    <option value="">Select a category</option>
                                    <!-- Categories will be populated by JavaScript -->
                                </select>
                                <button type="button" id="addCategoryBtn"
                                    class="bg-green-700 hover:bg-green-800 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline whitespace-nowrap">
                                    <i class="fas fa-plus"></i> New
                                </button>
                            </div>
                        </div>

                        <div class="mb-4 hidden" id="newCategoryInput">
                            <label class="block text-gray-700 text-sm font-bold mb-2" for="newCategory">
                                New Category
                            </label>
                            <div class="flex gap-2">
                                <input type="text" id="newCategory" placeholder="Enter new category"
                                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                                <button type="button" id="saveCategoryBtn"
                                    class="bg-green-700 hover:bg-green-800 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline whitespace-nowrap">
                                    Save
                                </button>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label class="block text-gray-700 text-sm font-bold mb-2" for="amount">
                                Amount (₹)
                            </label>
                            <input type="number" id="amount" min="0" step="0.01" required
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                placeholder="0.00">
                        </div>

                        <div class="mb-6">
                            <label class="block text-gray-700 text-sm font-bold mb-2" for="description">
                                Description
                            </label>
                            <textarea id="description" rows="3"
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                placeholder="Add any details about this savings"></textarea>
                        </div>

                        <div class="flex items-center justify-between">
                            <button type="submit"
                                class="bg-green-700 hover:bg-green-800 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                                Add Savings
                            </button>
                        </div>
                    </form>
                </div>

                <!-- Categories Management -->
                <div class="bg-white p-6 rounded-lg shadow mb-6">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-semibold text-gray-700">Categories</h2>
                    </div>
                    <div id="categoriesList" class="flex flex-wrap">
                        <!-- Categories will be populated here -->
                    </div>
                </div>

                <!-- Summary Card -->
                <div class="bg-white p-6 rounded-lg shadow">
                    <h2 class="text-xl font-semibold text-gray-700 mb-4">Savings Summary</h2>
                    <div class="grid grid-cols-1 gap-4">
                        <div class="bg-green-100 p-4 rounded-lg">
                            <p class="text-sm text-green-700">Total Savings</p>
                            <p class="text-2xl font-bold text-green-800">₹<span id="totalSavings">0</span></p>
                        </div>
                    </div>
                    <div class="mt-4 flex flex-col gap-2">
                        <button id="exportBtn"
                            class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            <i class="fas fa-download mr-2"></i> Export to File
                        </button>
                        <button id="importBtn"
                            class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
                            <i class="fas fa-upload mr-2"></i> Import from File
                        </button>
                        <input type="file" id="importFile" class="hidden" accept=".json">
                    </div>
                </div>
            </div>

            <!-- Right Column - Savings List -->
            <div class="w-full md:w-2/3">
                <div class="bg-white p-6 rounded-lg shadow">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-xl font-semibold text-gray-700">Savings History</h2>
                        <div class="flex gap-2">
                            <input type="text" id="searchInput" placeholder="Search savings..."
                                class="shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline w-full md:w-64">
                            <button id="filterBtn"
                                class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                                <i class="fas fa-filter"></i>
                            </button>
                        </div>
                    </div>

                    <div class="overflow-x-auto">
                        <table class="min-w-full bg-white">
                            <thead class="table-header">
                                <tr>
                                    <th
                                        class="py-2 px-4 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Date
                                    </th>
                                    <th
                                        class="py-2 px-4 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Category
                                    </th>
                                    <th
                                        class="py-2 px-4 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Description
                                    </th>
                                    <th
                                        class="py-2 px-4 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Amount
                                    </th>
                                    <th
                                        class="py-2 px-4 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="savingsList" class="text-gray-700">
                                <!-- Data will be populated here -->
                                <tr>
                                    <td colspan="5" class="text-center py-4" id="noDataMessage">
                                        No savings records found. Add your first savings above.
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Sample data for demonstration
            const sampleSavings = [
                { id: 1, date: '2023-10-15', category: 'Emergency Fund', amount: 5000, description: 'Monthly emergency fund contribution' },
                { id: 2, date: '2023-10-10', category: 'Retirement', amount: 7500, description: 'Retirement account deposit' },
                { id: 3, date: '2023-10-05', category: 'Vacation', amount: 3000, description: 'Save for year-end vacation' }
            ];

            // Initialize savings data
            let savingsData = JSON.parse(localStorage.getItem('savingsData')) || sampleSavings;
            let categories = JSON.parse(localStorage.getItem('savingsCategories')) ||
                ['Emergency Fund', 'Retirement', 'Vacation', 'Education', 'Investment'];

            // DOM Elements
            const savingsForm = document.getElementById('savingsForm');
            const categorySelect = document.getElementById('category');
            const addCategoryBtn = document.getElementById('addCategoryBtn');
            const newCategoryInput = document.getElementById('newCategoryInput');
            const newCategoryField = document.getElementById('newCategory');
            const saveCategoryBtn = document.getElementById('saveCategoryBtn');
            const savingsList = document.getElementById('savingsList');
            const noDataMessage = document.getElementById('noDataMessage');
            const totalSavingsElement = document.getElementById('totalSavings');
            const categoriesList = document.getElementById('categoriesList');
            const exportBtn = document.getElementById('exportBtn');
            const importBtn = document.getElementById('importBtn');
            const importFile = document.getElementById('importFile');

            // Initialize categories dropdown and display
            function initCategories() {
                // Clear existing options except the first one
                while (categorySelect.options.length > 1) {
                    categorySelect.remove(1);
                }

                // Add categories from the array
                categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category;
                    option.textContent = category;
                    categorySelect.appendChild(option);
                });

                // Update categories display
                updateCategoriesDisplay();
            }

            // Update categories display
            function updateCategoriesDisplay() {
                categoriesList.innerHTML = '';

                categories.forEach(category => {
                    const tag = document.createElement('div');
                    tag.className = 'category-tag';
                    tag.innerHTML = `
                        ${category}
                        <button type="button" data-category="${category}">
                            <i class="fas fa-times"></i>
                        </button>
                    `;
                    categoriesList.appendChild(tag);
                });

                // Add event listeners to delete buttons
                document.querySelectorAll('#categoriesList button').forEach(btn => {
                    btn.addEventListener('click', function () {
                        const categoryToDelete = this.getAttribute('data-category');
                        deleteCategory(categoryToDelete);
                    });
                });
            }

            // Delete a category
            function deleteCategory(category) {
                if (confirm(`Are you sure you want to delete the category "${category}"?`)) {
                    // Remove category from array
                    categories = categories.filter(cat => cat !== category);
                    localStorage.setItem('savingsCategories', JSON.stringify(categories));

                    // Update UI
                    initCategories();
                }
            }

            // Calculate and display total savings
            function calculateTotalSavings() {
                const total = savingsData.reduce((sum, item) => sum + parseFloat(item.amount), 0);
                totalSavingsElement.textContent = total.toLocaleString('en-IN');
            }

            // Display savings in the table
            function displaySavings() {
                if (savingsData.length === 0) {
                    noDataMessage.style.display = 'table-cell';
                    return;
                }

                noDataMessage.style.display = 'none';
                savingsList.innerHTML = '';

                savingsData.forEach(item => {
                    const row = document.createElement('tr');
                    row.classList.add('hover:bg-gray-50', 'savings-item');

                    // Format date for display
                    const dateObj = new Date(item.date);
                    const formattedDate = dateObj.toLocaleDateString('en-IN', {
                        day: '2-digit',
                        month: 'short',
                        year: 'numeric'
                    });

                    row.innerHTML = `
                        <td class="py-3 px-4 border-b border-gray-200">${formattedDate}</td>
                        <td class="py-3 px-4 border-b border-gray-200">
                            <span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded">${item.category}</span>
                        </td>
                        <td class="py-3 px-4 border-b border-gray-200">${item.description}</td>
                        <td class="py-3 px-4 border-b border-gray-200 font-medium">₹${parseFloat(item.amount).toLocaleString('en-IN')}</td>
                        <td class="py-3 px-4 border-b border-gray-200">
                            <button class="text-blue-600 hover:text-blue-900 mr-2 edit-btn" data-id="${item.id}">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="text-red-600 hover:text-red-900 delete-btn" data-id="${item.id}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;

                    savingsList.appendChild(row);
                });

                // Add event listeners to delete buttons
                document.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.addEventListener('click', function () {
                        const id = parseInt(this.getAttribute('data-id'));
                        deleteSavings(id);
                    });
                });
            }

            // Add new savings
            savingsForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const date = document.getElementById('date').value;
                const category = document.getElementById('category').value;
                const amount = document.getElementById('amount').value;
                const description = document.getElementById('description').value;

                if (!date || !category || !amount) {
                    alert('Please fill in all required fields');
                    return;
                }

                const newEntry = {
                    id: savingsData.length > 0 ? Math.max(...savingsData.map(item => item.id)) + 1 : 1,
                    date,
                    category,
                    amount: parseFloat(amount),
                    description
                };

                savingsData.push(newEntry);
                localStorage.setItem('savingsData', JSON.stringify(savingsData));

                displaySavings();
                calculateTotalSavings();

                // Reset form
                savingsForm.reset();
            });

            // Delete savings entry
            function deleteSavings(id) {
                if (confirm('Are you sure you want to delete this savings entry?')) {
                    savingsData = savingsData.filter(item => item.id !== id);
                    localStorage.setItem('savingsData', JSON.stringify(savingsData));
                    displaySavings();
                    calculateTotalSavings();
                }
            }

            // Show new category input
            addCategoryBtn.addEventListener('click', function () {
                newCategoryInput.classList.remove('hidden');
                newCategoryField.focus();
            });

            // Save new category
            saveCategoryBtn.addEventListener('click', function () {
                const newCategory = newCategoryField.value.trim();

                if (!newCategory) {
                    alert('Please enter a category name');
                    return;
                }

                if (categories.includes(newCategory)) {
                    alert('This category already exists');
                    return;
                }

                categories.push(newCategory);
                localStorage.setItem('savingsCategories', JSON.stringify(categories));

                initCategories();

                // Select the new category
                categorySelect.value = newCategory;

                // Hide the input field
                newCategoryInput.classList.add('hidden');
                newCategoryField.value = '';
            });

            // Export data to file
            exportBtn.addEventListener('click', function () {
                const data = {
                    savings: savingsData,
                    categories: categories,
                    exportedAt: new Date().toISOString()
                };

                const dataStr = JSON.stringify(data, null, 2);
                const dataBlob = new Blob([dataStr], { type: 'application/json' });

                // Create download link
                const link = document.createElement('a');
                link.href = URL.createObjectURL(dataBlob);
                link.download = 'savings.json';
                link.click();

                // Clean up
                URL.revokeObjectURL(link.href);
            });

            // Import data from file
            importBtn.addEventListener('click', function () {
                importFile.click();
            });

            importFile.addEventListener('change', function (e) {
                const file = e.target.files[0];
                if (!file) return;

                const reader = new FileReader();
                reader.onload = function (e) {
                    try {
                        const data = JSON.parse(e.target.result);

                        if (data.savings && Array.isArray(data.savings)) {
                            if (confirm('This will replace your current savings data. Continue?')) {
                                savingsData = data.savings;
                                localStorage.setItem('savingsData', JSON.stringify(savingsData));

                                if (data.categories && Array.isArray(data.categories)) {
                                    categories = data.categories;
                                    localStorage.setItem('savingsCategories', JSON.stringify(categories));
                                }

                                initCategories();
                                displaySavings();
                                calculateTotalSavings();

                                alert('Data imported successfully!');
                            }
                        } else {
                            alert('Invalid file format. Please select a valid savings export file.');
                        }
                    } catch (error) {
                        alert('Error reading file: ' + error.message);
                    }
                };
                reader.readAsText(file);

                // Reset file input
                e.target.value = '';
            });

            // Initialize the page
            initCategories();
            displaySavings();
            calculateTotalSavings();

            // Set today's date as default
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('date').value = today;
        });
    </script>
</body>

</html>